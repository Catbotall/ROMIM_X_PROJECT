"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const lwc_1 = require("lwc");
const socket_1 = require("store/socket");
const shared_1 = require("@best/shared");
// eslint-disable-next-line no-undef
const host = window.location.origin;
const socketConfig = { path: '/frontend', query: { frontend: true } };
class ViewDashboard extends lwc_1.LightningElement {
    constructor() {
        super(...arguments);
        this.agents = [];
        this.clients = [];
        this.activeClients = [];
        this.jobs = [];
    }
    connectedCallback() {
        const socket = (0, socket_1.connect)(host, socketConfig);
        socket.on(shared_1.BEST_RPC.AGENT_STATE, this.onAgentState.bind(this));
        socket.on(shared_1.BEST_RPC.HUB_CONNECTED_AGENT, this.onConnectedAgent.bind(this));
        socket.on(shared_1.BEST_RPC.HUB_DISCONNECTED_AGENT, this.onDisconnectedAgent.bind(this));
        socket.on(shared_1.BEST_RPC.AGENT_CONNECTED_CLIENT, this.onConnectedClient.bind(this));
        socket.on(shared_1.BEST_RPC.AGENT_DISCONNECTED_CLIENT, this.onDisconnectedClient.bind(this));
        socket.on(shared_1.BEST_RPC.AGENT_QUEUED_CLIENT, this.onQueuedClient.bind(this));
        socket.on(shared_1.BEST_RPC.BENCHMARK_START, this.onBenchmarkStart.bind(this));
        socket.on(shared_1.BEST_RPC.BENCHMARK_UPDATE, this.onBenchmarkUpdate.bind(this));
        socket.on(shared_1.BEST_RPC.BENCHMARK_END, this.onBenchmarkEnd.bind(this));
    }
    onAgentState(state) {
        console.log(shared_1.BEST_RPC.AGENT_STATE, state);
        this.agents = state.connectedAgents;
        this.clients = state.connectedClients;
        state.activeClients.forEach(({ agentId, clientId }) => {
            this.setClientState('BUSY', clientId);
            this.setAgentState('BUSY', agentId);
        });
    }
    onConnectedAgent(newAgent) {
        const { agentId } = newAgent;
        console.log(shared_1.BEST_RPC.HUB_CONNECTED_AGENT, newAgent);
        if (!this.agents.find((agent) => agent.agentId === agentId)) {
            this.agents.push({ ...newAgent, state: newAgent.state || 'IDLE' });
        }
    }
    onDisconnectedAgent(removedAgent) {
        const { agentId } = removedAgent;
        console.log(shared_1.BEST_RPC.HUB_DISCONNECTED_AGENT, removedAgent);
        const index = this.agents.findIndex((agent) => agent.agentId === agentId);
        if (index > -1) {
            this.agents.splice(index, 1);
        }
        const jobIndex = this.jobs.findIndex((j) => j.agentId === agentId);
        if (jobIndex > -1) {
            this.jobs.splice(jobIndex, 1);
        }
    }
    onConnectedClient(newClient) {
        const { clientId } = newClient;
        console.log(shared_1.BEST_RPC.AGENT_CONNECTED_CLIENT, newClient);
        if (!this.clients.find((client) => client.clientId === clientId)) {
            this.clients.push({ ...newClient });
        }
    }
    onDisconnectedClient(clientId) {
        const pos = this.clients.findIndex((c) => c.id === clientId);
        this.clients.splice(pos, 1);
        const jobIndex = this.jobs.findIndex((j) => j.clientId === clientId);
        if (jobIndex > -1) {
            this.jobs.splice(jobIndex, 1);
        }
    }
    onQueuedClient(...args) {
        console.log(shared_1.BEST_RPC.AGENT_QUEUED_CLIENT, args);
    }
    onBenchmarkStart(bStart) {
        console.log(shared_1.BEST_RPC.BENCHMARK_START, bStart);
        const agent = this.agents.find((a) => a.agentId === bStart.agentId);
        const client = this.clients.find((c) => c.clientId === bStart.clientId);
        if (agent && client) {
            this.setClientState('BUSY', client.clientId);
            this.setAgentState('BUSY', agent.agentId);
        }
    }
    onBenchmarkEnd(bEnd) {
        console.log(shared_1.BEST_RPC.BENCHMARK_END, bEnd);
        const jobIndex = this.jobs.findIndex((j) => j.benchmarkId === bEnd.benchmarkId);
        const agent = this.agents.find((a) => a.agentId === bEnd.agentId);
        const client = this.clients.find((c) => c.clientId === bEnd.clientId);
        if (agent && client) {
            this.setClientState('IDLE', client.clientId);
            this.setAgentState('IDLE', agent.agentId);
        }
        if (jobIndex > -1) {
            this.jobs.splice(jobIndex, 1);
        }
    }
    onBenchmarkUpdate(update) {
        console.log(shared_1.BEST_RPC.BENCHMARK_UPDATE, update);
        const job = this.jobs.find((j) => j.benchmarkId === update.benchmarkId);
        if (!job) {
            this.jobs.push({
                benchmarkId: update.benchmarkId,
                clientId: update.clientId,
                agentId: update.agentId,
                executedTime: update.state.executedTime,
                executedIterations: update.state.executedIterations,
                iterations: update.opts.iterations,
                maxDuration: update.opts.maxDuration,
                minSampleCount: update.opts.minSampleCount,
            });
        }
        else {
            job.executedTime = update.state.executedTime;
            job.executedIterations = update.state.executedIterations;
        }
    }
    // STATE CHANGES
    setClientState(state, clientId) {
        const client = this.clients.find((c) => c.clientId === clientId);
        if (client) {
            client.state = state;
        }
    }
    setAgentState(state, agentId) {
        const agent = this.agents.find((c) => c.agentId === agentId);
        if (agent) {
            agent.state = state;
        }
    }
    // GETTERS
    get connectedClients() {
        return this.clients.length;
    }
    get connectedAgents() {
        return this.agents.length;
    }
    get normalizedAgents() {
        return this.agents.map((agent) => ({ ...agent }));
    }
    get normalizedClients() {
        return this.clients.map((client) => ({ ...client }));
    }
    get hasJobs() {
        return this.jobs.length > 0;
    }
}
exports.default = ViewDashboard;
__decorate([
    lwc_1.track
], ViewDashboard.prototype, "agents", void 0);
__decorate([
    lwc_1.track
], ViewDashboard.prototype, "clients", void 0);
__decorate([
    lwc_1.track
], ViewDashboard.prototype, "activeClients", void 0);
__decorate([
    lwc_1.track
], ViewDashboard.prototype, "jobs", void 0);
//# sourceMappingURL=dashboard.js.map