"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const lwc_1 = require("lwc");
function normalizeTime(sec_num) {
    let minutes = Math.floor(sec_num / 60);
    let seconds = sec_num - minutes * 60;
    if (minutes > 99) {
        return '99:99';
    }
    if (minutes < 10) {
        minutes = '0' + minutes;
    }
    if (seconds < 10) {
        seconds = '0' + seconds;
    }
    return minutes + ':' + seconds;
}
function calculateProgress(executedIterations, executedTime, iterations, maxDuration, minSampleCount) {
    const avgIteration = executedTime / executedIterations;
    const runtime = parseInt(executedTime / 1000 + '', 10);
    let estimated;
    if (iterations) {
        estimated = Math.round((iterations * avgIteration) / 1000) + 1;
    }
    else if (avgIteration * minSampleCount > maxDuration) {
        estimated = Math.round((minSampleCount * avgIteration) / 1000) + 1;
    }
    else {
        estimated = maxDuration / 1000;
    }
    return {
        executedIterations,
        estimated: normalizeTime(estimated),
        runtime: normalizeTime(runtime),
        avgIteration,
        percentage: Math.round((runtime * 100) / estimated),
    };
}
class ComponentJob extends lwc_1.LightningElement {
    constructor() {
        super(...arguments);
        this.executedTime = 0;
        this.executedIterations = 0;
        this.iterations = 0;
        this.maxDuration = 0;
        this.minSampleCount = 0;
    }
    get isRunning() {
        return true;
    }
    get progress() {
        return calculateProgress(this.executedIterations, this.executedTime, this.iterations, this.maxDuration, this.minSampleCount);
    }
    get hasEstimate() {
        return false;
    }
}
exports.default = ComponentJob;
__decorate([
    lwc_1.api
], ComponentJob.prototype, "benchmarkId", void 0);
__decorate([
    lwc_1.api
], ComponentJob.prototype, "clientId", void 0);
__decorate([
    lwc_1.api
], ComponentJob.prototype, "agentId", void 0);
__decorate([
    lwc_1.api
], ComponentJob.prototype, "executedTime", void 0);
__decorate([
    lwc_1.api
], ComponentJob.prototype, "executedIterations", void 0);
__decorate([
    lwc_1.api
], ComponentJob.prototype, "iterations", void 0);
__decorate([
    lwc_1.api
], ComponentJob.prototype, "maxDuration", void 0);
__decorate([
    lwc_1.api
], ComponentJob.prototype, "minSampleCount", void 0);
//# sourceMappingURL=job.js.map