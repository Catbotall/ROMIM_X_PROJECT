"use strict";
/*
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCommits = exports.getProjects = exports.getAllBenchmarkStatsPerCommit = exports.storeBenchmarkResults = exports.initialize = void 0;
const fs_1 = __importDefault(require("fs"));
const globby_1 = require("globby");
let ROOT_DIR = process.cwd();
const IGNORE_PATHS = ['**/node_modules/**', '**/__tests__/**'];
function initialize({ rootDir }) {
    ROOT_DIR = rootDir || ROOT_DIR;
}
exports.initialize = initialize;
async function storeBenchmarkResults() {
    // fileMap,
    // { benchmarkName, benchmarkSignature, projectConfig },
    // globalConfig,
    throw new Error('Method not implemented yet...');
}
exports.storeBenchmarkResults = storeBenchmarkResults;
async function getAllBenchmarkStatsPerCommit(projectName, commit) {
    const pattern = `**/${projectName}/*.benchmark_${commit}/stats.json`;
    const results = await (0, globby_1.globby)([pattern], {
        cwd: ROOT_DIR,
        ignore: IGNORE_PATHS,
    });
    const statsResults = results.map((statsPath) => {
        return JSON.parse(fs_1.default.readFileSync(statsPath, 'utf8'));
    });
    return statsResults;
}
exports.getAllBenchmarkStatsPerCommit = getAllBenchmarkStatsPerCommit;
function getProjects() {
    throw new Error('Method not implemented yet...');
}
exports.getProjects = getProjects;
function getCommits( /* projectName, branch */) {
    throw new Error('Method not implemented yet...');
}
exports.getCommits = getCommits;
//# sourceMappingURL=index.js.map